/**
 *** Copyright (c) 2016-2019, Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp.
 *** Copyright (c) 2020-present, Jaguar0625, gimre, BloodyRookie.
 *** All rights reserved.
 ***
 *** This file is part of Catapult.
 ***
 *** Catapult is free software: you can redistribute it and/or modify
 *** it under the terms of the GNU Lesser General Public License as published by
 *** the Free Software Foundation, either version 3 of the License, or
 *** (at your option) any later version.
 ***
 *** Catapult is distributed in the hope that it will be useful,
 *** but WITHOUT ANY WARRANTY; without even the implied warranty of
 *** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *** GNU Lesser General Public License for more details.
 ***
 *** You should have received a copy of the GNU Lesser General Public License
 *** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
 **/

import { AddressDto } from './AddressDto';
import { BlockFeeMultiplierDto } from './BlockFeeMultiplierDto';
import { BlockHeaderBuilder, BlockHeaderBuilderParams } from './BlockHeaderBuilder';
import { DifficultyDto } from './DifficultyDto';
import { EntityTypeDto } from './EntityTypeDto';
import { GeneratorUtils } from './GeneratorUtils';
import { Hash256Dto } from './Hash256Dto';
import { HeightDto } from './HeightDto';
import { KeyDto } from './KeyDto';
import { NetworkTypeDto } from './NetworkTypeDto';
import { Serializer } from './Serializer';
import { SignatureDto } from './SignatureDto';
import { TimestampDto } from './TimestampDto';
import { VrfProofBuilder } from './VrfProofBuilder';

/**
 *  Interface to create instances of NormalBlockHeaderBuilder.
 */
export type NormalBlockHeaderBuilderParams = BlockHeaderBuilderParams;

/**
 * Binary layout for a normal block header
 **/
export class NormalBlockHeaderBuilder extends BlockHeaderBuilder implements Serializer {
    public static readonly VERSION = 1;
    public static readonly ENTITY_TYPE = EntityTypeDto.NORMAL_BLOCK_HEADER;

    /**
     * Constructor.
     *
     * @param signature Entity signature.
     * @param signerPublicKey Entity signer's public key.
     * @param version Entity version.
     * @param network Entity network.
     * @param type Entity type.
     * @param height Block height.
     * @param timestamp Number of milliseconds elapsed since creation of nemesis block.
     * @param difficulty Block difficulty.
     * @param generationHashProof Generation hash proof.
     * @param previousBlockHash Previous block hash.
     * @param transactionsHash Hash of the transactions in this block.
     * @param receiptsHash Hash of the receipts generated by this block.
     * @param stateHash Hash of the global chain state at this block.
     * @param beneficiaryAddress Beneficiary address designated by harvester.
     * @param feeMultiplier Fee multiplier applied to block transactions.
     */
    public constructor({
        signature,
        signerPublicKey,
        version,
        network,
        type,
        height,
        timestamp,
        difficulty,
        generationHashProof,
        previousBlockHash,
        transactionsHash,
        receiptsHash,
        stateHash,
        beneficiaryAddress,
        feeMultiplier,
    }: NormalBlockHeaderBuilderParams) {
        super({
            signature,
            signerPublicKey,
            version,
            network,
            type,
            height,
            timestamp,
            difficulty,
            generationHashProof,
            previousBlockHash,
            transactionsHash,
            receiptsHash,
            stateHash,
            beneficiaryAddress,
            feeMultiplier,
        });
        if (version !== NormalBlockHeaderBuilder.VERSION)
            throw new Error('The provided version value ' + version + ' is invalid. Expected value is ' + NormalBlockHeaderBuilder.VERSION);
        if (type !== NormalBlockHeaderBuilder.ENTITY_TYPE)
            throw new Error('The provided type value ' + type + ' is invalid. Expected value is ' + NormalBlockHeaderBuilder.ENTITY_TYPE);
    }

    /**
     * Load from binary array - Creates an object from payload.
     *
     * @param payload Byte payload to use to serialize the object.
     */

    public static loadFromBinary(payload: Uint8Array): NormalBlockHeaderBuilder {
        const byteArray = Array.from(payload);
        const superObject = BlockHeaderBuilder.loadFromBinary(payload);
        byteArray.splice(0, superObject.size);
        GeneratorUtils.bufferToUint32(Uint8Array.from(byteArray));
        byteArray.splice(0, 4);
        return new NormalBlockHeaderBuilder({
            signature: superObject.signature,
            signerPublicKey: superObject.signerPublicKey,
            version: superObject.version,
            network: superObject.network,
            type: superObject.type,
            height: superObject.height,
            timestamp: superObject.timestamp,
            difficulty: superObject.difficulty,
            generationHashProof: superObject.generationHashProof,
            previousBlockHash: superObject.previousBlockHash,
            transactionsHash: superObject.transactionsHash,
            receiptsHash: superObject.receiptsHash,
            stateHash: superObject.stateHash,
            beneficiaryAddress: superObject.beneficiaryAddress,
            feeMultiplier: superObject.feeMultiplier,
        });
    }

    /**
     * Creates an instance of NormalBlockHeaderBuilder.
     *
     * @param signature Entity signature.
     * @param signerPublicKey Entity signer's public key.
     * @param network Entity network.
     * @param height Block height.
     * @param timestamp Number of milliseconds elapsed since creation of nemesis block.
     * @param difficulty Block difficulty.
     * @param generationHashProof Generation hash proof.
     * @param previousBlockHash Previous block hash.
     * @param transactionsHash Hash of the transactions in this block.
     * @param receiptsHash Hash of the receipts generated by this block.
     * @param stateHash Hash of the global chain state at this block.
     * @param beneficiaryAddress Beneficiary address designated by harvester.
     * @param feeMultiplier Fee multiplier applied to block transactions.
     * @return Instance of NormalBlockHeaderBuilder.
     */
    public static createNormalBlockHeaderBuilder(
        signature: SignatureDto,
        signerPublicKey: KeyDto,
        network: NetworkTypeDto,
        height: HeightDto,
        timestamp: TimestampDto,
        difficulty: DifficultyDto,
        generationHashProof: VrfProofBuilder,
        previousBlockHash: Hash256Dto,
        transactionsHash: Hash256Dto,
        receiptsHash: Hash256Dto,
        stateHash: Hash256Dto,
        beneficiaryAddress: AddressDto,
        feeMultiplier: BlockFeeMultiplierDto,
    ): NormalBlockHeaderBuilder {
        const version = NormalBlockHeaderBuilder.VERSION;
        const type = NormalBlockHeaderBuilder.ENTITY_TYPE;
        return new NormalBlockHeaderBuilder({
            signature: signature,
            signerPublicKey: signerPublicKey,
            version: version,
            network: network,
            type: type,
            height: height,
            timestamp: timestamp,
            difficulty: difficulty,
            generationHashProof: generationHashProof,
            previousBlockHash: previousBlockHash,
            transactionsHash: transactionsHash,
            receiptsHash: receiptsHash,
            stateHash: stateHash,
            beneficiaryAddress: beneficiaryAddress,
            feeMultiplier: feeMultiplier,
        });
    }

    /**
     * Gets the size of the object.
     *
     * @return Size in bytes.
     */
    public get size(): number {
        let size = super.size;
        size += 4; // blockHeader_Reserved1
        return size;
    }

    /**
     * Serializes an object to bytes.
     *
     * @return Serialized bytes.
     */
    public serialize(): Uint8Array {
        let newArray = Uint8Array.from([]);
        const superBytes = super.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, superBytes);
        const blockHeader_Reserved1Bytes = GeneratorUtils.uint32ToBuffer(0);
        newArray = GeneratorUtils.concatTypedArrays(newArray, blockHeader_Reserved1Bytes);
        return newArray;
    }
}
